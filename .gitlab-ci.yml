stages:
  - checkout
  - setup
  - list_files
  - install_dependencies
  - build
  - test
  - code_quality
  - quality_gate
  - package
  - upload

variables:
  GO_VERSION: '1.22.5'  # Specify the Go version you are using
  NEXUS_CREDENTIALS_ID: 'nexus-jenkins'
  NEXUS_URL: 'https://nexus.u-cloudsolutions.xyz'
  NEXUS_REPOSITORY: 'student-repository'
  GROUP_ID: 'com.artificial.GO'
  ARTIFACT_ID: 'artifact'
  SONARQUBE_URL: 'https://sonarqube.u-cloudsolutions.xyz'
  SONARQUBE_TOKEN: 'squ_b730e6c811798750f5442b5ec90950a58600c316'

before_script:
  - export PATH=/usr/local/go/bin:$PATH

checkout:
  stage: checkout
  script:
    - git clone https://gitlab.u-cloudsolutions.xyz/summary-internship/2024/wissem-sghaier/my-gin-project.git .
    - git rev-parse --short HEAD > commit_hash.txt
    - export COMMIT_ID=$(cat commit_hash.txt | tr -d '\n')
    - export ZIP_FILE_NAME="${ARTIFACT_ID}-${COMMIT_ID}.zip"
    - echo "Commit Hash: ${COMMIT_ID}"
    - echo "Zip File Name: ${ZIP_FILE_NAME}"

setup:
  stage: setup
  script:
    - echo "Setting up Go environment"
    - curl -LO https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz
    - sudo tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
    - go version

list_files:
  stage: list_files
  script:
    - echo "Listing files in the workspace"
    - ls -al

install_dependencies:
  stage: install_dependencies
  script:
    - echo "Downloading Go modules"
    - go mod download

build:
  stage: build
  script:
    - echo "Building the Go project"
    - go build -o main .

test:
  stage: test
  script:
    - echo "Running unit tests"
    - go test -v ./...

code_quality:
  stage: code_quality
  script:
    - echo "Running SonarQube scanner"
    - sonar-scanner \
      -Dsonar.projectKey=Go-project \
      -Dsonar.projectName=Go-project \
      -Dsonar.sources=. \
      -Dsonar.host.url=${SONARQUBE_URL} \
      -Dsonar.login=${SONARQUBE_TOKEN} \
      -Dsonar.exclusions=vendor/**

quality_gate:
  stage: quality_gate
  script:
    - echo "Waiting for SonarQube Quality Gate"
    - sleep 60
    - sonar-quality-gate-check --server ${SONARQUBE_URL} --token ${SONARQUBE_TOKEN}

package:
  stage: package
  script:
    - echo "Packaging project as ${ZIP_FILE_NAME}..."
    - sudo apt-get update
    - sudo apt-get install -y zip
    - zip -r ${ZIP_FILE_NAME} .

upload:
  stage: upload
  script:
    - echo "Uploading ${ZIP_FILE_NAME} to Nexus..."
    - curl -u ${NEXUS_CREDENTIALS_ID}:${NEXUS_PASSWORD} \
      --upload-file ${ZIP_FILE_NAME} \
      "${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${GROUP_ID//./\/}/${ARTIFACT_ID}/${COMMIT_ID}/${ZIP_FILE_NAME}"
  only:
    - main
